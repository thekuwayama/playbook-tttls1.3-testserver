# encoding: ascii-8bit
# frozen_string_literal: true

require 'etc'
require 'http/parser'
require 'logger'
require 'socket'
require 'time'
require 'timeout'
require 'tttls1.3'
require 'webrick'

CRT_FILE_PATH = '/etc/letsencrypt/live/{{ domain }}/cert.pem'
CHAIN_FILE_PATH = '/etc/letsencrypt/live/{{ domain }}/chain.pem'
KEY_FILE_PATH = '/etc/letsencrypt/live/{{ domain }}/privkey.pem'
INDEX_FILE_PATH = '{{ https_server_directory }}/index.html'

def simple_http_response(body)
  h = <<~HEADER_EOS
    HTTP/1.1 200 OK
    Date: #{Time.now.httpdate}
    Content-Type: text/html
    Content-Length: #{body.length}
    Server: tttls1.3 https server
    Strict-Transport-Security: max-age=63072000; includeSubDomains; preload
  HEADER_EOS

  h.gsub(WEBrick::LF, WEBrick::CRLF) + WEBrick::CRLF + body
end
http_response_body = File.read(INDEX_FILE_PATH)
http_response = simple_http_response(http_response_body)

cid = OpenSSL::OCSP::CertificateId.new(
  OpenSSL::X509::Certificate.new(File.read(CRT_FILE_PATH)),
  OpenSSL::X509::Certificate.new(File.read(CHAIN_FILE_PATH))
)
process_ocsp_response = lambda do
  der = File.binread('{{ ocsp_response_fetcher_cache_file }}')
  ocsp_response = OpenSSL::OCSP::Response.new(der)
  status = ocsp_response.basic.find_response(cid)
  return nil if status.nil? || status.next_update < Time.now

  ocsp_response
rescue Errno::ENOENT, OpenSSL::OCSP::OCSPError
  return nil
end

settings = {
  crt_file: CRT_FILE_PATH,
  chain_files: [CHAIN_FILE_PATH],
  key_file: KEY_FILE_PATH,
  alpn: ['http/1.1'],
  process_ocsp_response: process_ocsp_response,
  cipher_suites: [
    TTTLS13::CipherSuite::TLS_CHACHA20_POLY1305_SHA256,
    TTTLS13::CipherSuite::TLS_AES_256_GCM_SHA384
  ],
  supported_groups: [
    TTTLS13::NamedGroup::SECP384R1,
    TTTLS13::NamedGroup::SECP521R1
  ]
}

q = Queue.new
logger = Logger.new(STDERR, Logger::WARN)
# rubocop: disable Metrics/BlockLength
Etc.nprocessors.times do
  Thread.start do
    loop do
      s = q.pop
      Timeout.timeout(1) do
        server = TTTLS13::Server.new(s, **settings)
        parser = HTTP::Parser.new

        parser.on_message_complete = proc do
          if !parser.http_method.nil?
            logger.info 'Receive Request'
            server.write(http_response)
            server.close
          else
            logger.warn 'Not Request'
          end
        end

        begin
          server.accept
          parser << server.read until server.eof?
          server.close
        rescue StandardError => e
          logger.warn e
        ensure
          parser.reset!
        end
      end
    rescue Timeout::Error
      logger.warn 'Timeout'
    ensure
      s.close
    end
  end
end
# rubocop: enable Metrics/BlockLength

port = ARGV[0] || 443
Socket.tcp_server_loop(port) do |socket, _addr|
  q << socket
end
